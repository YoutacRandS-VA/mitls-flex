(*
 * Copyright 2015 INRIA and Microsoft Corporation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

module StatefulLHAE

open Error
open TLSError
open Bytes
open TLSInfo
open Range
open StatefulPlain

(* This module is parameterized by StatefulPlain, providing
   abstract types 'plain' for plaintext and 'history' for sequences of plaintexts

   The functionality is indexed by succEpochs, also treated abstractly. *)

private type (;ki:id,rw:rw) state = {
  key    : (;ki,rw) LHAE.LHAEKey;  // possibly stateful
  history: (;ki) history           // ghost state, except for the sequence number
}
type (;ki:id) reader = r:(;ki,Reader) state
type (;ki:id) writer = w:(;ki,Writer) state

function val History: e:id * rw:rw * (;e,rw)state -> 'a //(;e)history
private definition !e,rw,s. History(e,rw,s) = s.history

val GEN:    ki:id               -> r:(;ki)reader * w:(;ki)writer{History (ki, TLSInfo.Reader, r) = EmptyHistory (ki) /\
                                                                 History (ki, TLSInfo.Writer, w) = EmptyHistory (ki)}
val COERCE: ki:id{not AuthId(ki)} -> rw:rw -> b:bytes{Length(b)=LHAE.KeySize(ki.aeAlg)} -> s:(;ki,rw)state{History(ki,rw,s) = EmptyHistory(ki)}
val LEAK:   ki:id{not AuthId(ki)} -> rw:rw -> (;ki,rw)state -> b:bytes

val history: ki:id -> rw:rw -> s:(;ki,rw) state -> h:(;ki)history{h=History(ki,rw,s)}

// Ideally,
// the writer maintains a table (i, h, ad, range, fragment, cipher) {...} [details?]
// when SafeId(i), the writer uses 0s instead of the actual fragment
// when AuthId(i), the reader decrypts by table lookup
// turning forgeries into errors; retrieving the "right" history index; returning the concrete decrypted range

type cipher = LHAE.cipher

predicate ENCrypted of e:id * h:(;e)history * ad:(;e)adata * cipher
private definition !e,h,ad,c.
  ENCrypted(e,h,ad,c) <=>
  (?ad'. B(ad') = LHAEPlain.MakeAD(e,h,B(ad)) /\
         LHAE.ENCrypted(e,ad',c))

val encrypt:
  ki:id -> wr:(;ki) writer ->
  ad:(;ki) adata ->
  rg:range ->
  f: (;ki,ad,History(ki,Writer,wr),rg) plain ->
  (wr':(;ki) writer * c:cipher)
  {   History(ki,Writer,wr') = ExtendHistory(ki,ad,History(ki,Writer,wr),rg,f)
  /\  (SafeId(ki) => ENCrypted(ki,History(ki,Writer,wr),ad,c)) }

val decrypt:
  ki:id -> rd:(;ki) reader ->
  ad:(;ki) adata ->
  c:cipher ->
  ((rd':(;ki)reader * rg:range * p:(;ki,ad,History(ki,Reader,rd),rg) plain){
	History(ki,Reader,rd') = ExtendHistory(ki,ad,History(ki,Reader,rd),rg,p) /\
	rg = CipherRangeClass(ki,Length(c)) /\
	(SafeId(ki) => ENCrypted(ki,History(ki,Reader,rd),ad,c))
  }) Result
